// Generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: src/log.capnp


pub mod h_t_t_p {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::private::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  #[derive(Copy)]
  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Reader>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Reader<'a>> for Reader<'b> {
    fn cast(self) -> Reader<'a> { Reader { reader : self.reader } }
  }

  impl <'a> Reader<'a> {
    pub fn borrow<'b>(&'b self) -> Reader<'b> {
      Reader { reader : self.reader}
    }

    pub fn total_size(&self) -> ::capnp::MessageSize {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_protocol(self) -> Option<::log_capnp::h_t_t_p::Protocol> {
      ::std::num::FromPrimitive::from_u16(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_status(self) -> u16 {
      self.reader.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn get_host_status(self) -> u16 {
      self.reader.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn get_up_status(self) -> u16 {
      self.reader.get_data_field::<u16>(3)
    }
    #[inline]
    pub fn get_method(self) -> Option<::log_capnp::h_t_t_p::Method> {
      ::std::num::FromPrimitive::from_u16(self.reader.get_data_field::<u16>(4))
    }
    #[inline]
    pub fn get_content_type(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    pub fn has_content_type(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_user_agent(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    pub fn has_user_agent(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_referer(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(2).get_text(::std::ptr::null(), 0)
    }
    pub fn has_referer(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_request_u_r_i(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(3).get_text(::std::ptr::null(), 0)
    }
    pub fn has_request_u_r_i(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::private::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Builder>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::private::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Builder<'a>> for Builder<'b> {
    fn cast(self) -> Builder<'a> { Builder { builder : self.builder } }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    pub fn borrow<'b>(&'b mut self) -> Builder<'b> {
      Builder { builder : self.builder}
    }

    pub fn total_size(&self) -> ::capnp::MessageSize {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_protocol(self) -> Option<::log_capnp::h_t_t_p::Protocol> {
      ::std::num::FromPrimitive::from_u16(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_protocol(&mut self, value : ::log_capnp::h_t_t_p::Protocol) {
      self.builder.set_data_field::<u16>(0, value as u16)
    }
    #[inline]
    pub fn get_status(self) -> u16 {
      self.builder.get_data_field::<u16>(1)
    }
    #[inline]
    pub fn set_status(&mut self, value : u16) {
      self.builder.set_data_field::<u16>(1, value);
    }
    #[inline]
    pub fn get_host_status(self) -> u16 {
      self.builder.get_data_field::<u16>(2)
    }
    #[inline]
    pub fn set_host_status(&mut self, value : u16) {
      self.builder.set_data_field::<u16>(2, value);
    }
    #[inline]
    pub fn get_up_status(self) -> u16 {
      self.builder.get_data_field::<u16>(3)
    }
    #[inline]
    pub fn set_up_status(&mut self, value : u16) {
      self.builder.set_data_field::<u16>(3, value);
    }
    #[inline]
    pub fn get_method(self) -> Option<::log_capnp::h_t_t_p::Method> {
      ::std::num::FromPrimitive::from_u16(self.builder.get_data_field::<u16>(4))
    }
    #[inline]
    pub fn set_method(&mut self, value : ::log_capnp::h_t_t_p::Method) {
      self.builder.set_data_field::<u16>(4, value as u16)
    }
    #[inline]
    pub fn get_content_type(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_content_type(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_content_type(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_content_type(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_user_agent(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_user_agent(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_user_agent(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_user_agent(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_referer(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(2).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_referer(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_referer(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_referer(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_request_u_r_i(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(3).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_request_u_r_i(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(3).set_text(value);
    }
    #[inline]
    pub fn init_request_u_r_i(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(3).init_text(size)
    }
    pub fn has_request_u_r_i(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 2, pointers : 4 };
    pub const TYPE_ID: u64 = 0xbb90f4fb3107eceb;
  }

  #[repr(u16)]
  #[derive(PartialEq, FromPrimitive, Copy)]
  pub enum Protocol {
    Unknown = 0,
    Http10 = 1,
    Http11 = 2,
    Max = 3,
  }
  impl ::capnp::traits::ToU16 for Protocol {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Protocol {
    #[inline]
    fn type_id(_unused_self : Option<Protocol>) -> u64 { 0xafb5e733e387a0c6u64 }
  }

  #[repr(u16)]
  #[derive(PartialEq, FromPrimitive, Copy)]
  pub enum Method {
    Unknown = 0,
    Get = 1,
    Post = 2,
    Delete = 3,
    Put = 4,
    Head = 5,
    Purge = 6,
    Options = 7,
    Propfind = 8,
    Mkcol = 9,
    Patch = 10,
    Max = 11,
  }
  impl ::capnp::traits::ToU16 for Method {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Method {
    #[inline]
    fn type_id(_unused_self : Option<Method>) -> u64 { 0xcfb5de5c8849d02eu64 }
  }
}

#[repr(u16)]
#[derive(PartialEq, FromPrimitive, Copy)]
pub enum CacheStatus {
  Unknown = 0,
  Miss = 1,
  Expired = 2,
  Hit = 3,
  Max = 4,
}
impl ::capnp::traits::ToU16 for CacheStatus {
  #[inline]
  fn to_u16(self) -> u16 { self as u16 }
}
impl ::capnp::traits::HasTypeId for CacheStatus {
  #[inline]
  fn type_id(_unused_self : Option<CacheStatus>) -> u64 { 0xc793f92dfc99b509u64 }
}

pub mod origin {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::private::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  #[derive(Copy)]
  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Reader>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Reader<'a>> for Reader<'b> {
    fn cast(self) -> Reader<'a> { Reader { reader : self.reader } }
  }

  impl <'a> Reader<'a> {
    pub fn borrow<'b>(&'b self) -> Reader<'b> {
      Reader { reader : self.reader}
    }

    pub fn total_size(&self) -> ::capnp::MessageSize {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_ip(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    pub fn has_ip(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_port(self) -> u16 {
      self.reader.get_data_field::<u16>(0)
    }
    #[inline]
    pub fn get_hostname(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    pub fn has_hostname(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_protocol(self) -> Option<::log_capnp::origin::Protocol> {
      ::std::num::FromPrimitive::from_u16(self.reader.get_data_field::<u16>(1))
    }
  }

  pub struct Builder<'a> { builder : ::capnp::private::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Builder>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::private::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Builder<'a>> for Builder<'b> {
    fn cast(self) -> Builder<'a> { Builder { builder : self.builder } }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    pub fn borrow<'b>(&'b mut self) -> Builder<'b> {
      Builder { builder : self.builder}
    }

    pub fn total_size(&self) -> ::capnp::MessageSize {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_ip(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_ip(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_ip(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_ip(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_port(self) -> u16 {
      self.builder.get_data_field::<u16>(0)
    }
    #[inline]
    pub fn set_port(&mut self, value : u16) {
      self.builder.set_data_field::<u16>(0, value);
    }
    #[inline]
    pub fn get_hostname(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_hostname(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_hostname(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_hostname(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_protocol(self) -> Option<::log_capnp::origin::Protocol> {
      ::std::num::FromPrimitive::from_u16(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_protocol(&mut self, value : ::log_capnp::origin::Protocol) {
      self.builder.set_data_field::<u16>(1, value as u16)
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 1, pointers : 2 };
    pub const TYPE_ID: u64 = 0xc7ce2257524dad7b;
  }

  #[repr(u16)]
  #[derive(PartialEq, FromPrimitive, Copy)]
  pub enum Protocol {
    Unknown = 0,
    Http = 1,
    Https = 2,
    Max = 3,
  }
  impl ::capnp::traits::ToU16 for Protocol {
    #[inline]
    fn to_u16(self) -> u16 { self as u16 }
  }
  impl ::capnp::traits::HasTypeId for Protocol {
    #[inline]
    fn type_id(_unused_self : Option<Protocol>) -> u64 { 0xf5c3b93c1d72adbfu64 }
  }
}

#[repr(u16)]
#[derive(PartialEq, FromPrimitive, Copy)]
pub enum ZonePlan {
  Unknown = 0,
  Free = 1,
  Pro = 2,
  Biz = 3,
  Ent = 4,
  Max = 5,
}
impl ::capnp::traits::ToU16 for ZonePlan {
  #[inline]
  fn to_u16(self) -> u16 { self as u16 }
}
impl ::capnp::traits::HasTypeId for ZonePlan {
  #[inline]
  fn type_id(_unused_self : Option<ZonePlan>) -> u64 { 0xf1d59ce6671bfa64u64 }
}

pub mod log {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data};
  use capnp::private::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  #[derive(Copy)]
  pub struct Reader<'a> { reader : layout::StructReader<'a> }

  impl <'a> ::capnp::traits::HasTypeId for Reader<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Reader>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructReader<'a> for Reader<'a> {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a> {
      Reader { reader : reader }
    }
  }

  impl <'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(reader.get_struct(::std::ptr::null()))
    }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Reader<'a>> for Reader<'b> {
    fn cast(self) -> Reader<'a> { Reader { reader : self.reader } }
  }

  impl <'a> Reader<'a> {
    pub fn borrow<'b>(&'b self) -> Reader<'b> {
      Reader { reader : self.reader}
    }

    pub fn total_size(&self) -> ::capnp::MessageSize {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.reader.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn get_zone_id(self) -> u32 {
      self.reader.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn get_zone_plan(self) -> Option<::log_capnp::ZonePlan> {
      ::std::num::FromPrimitive::from_u16(self.reader.get_data_field::<u16>(6))
    }
    #[inline]
    pub fn get_http(self) -> ::log_capnp::h_t_t_p::Reader<'a> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0))
    }
    pub fn has_http(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_origin(self) -> ::log_capnp::origin::Reader<'a> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1))
    }
    pub fn has_origin(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_country(self) -> Option<::country_capnp::Country> {
      ::std::num::FromPrimitive::from_u16(self.reader.get_data_field::<u16>(7))
    }
    #[inline]
    pub fn get_cache_status(self) -> Option<::log_capnp::CacheStatus> {
      ::std::num::FromPrimitive::from_u16(self.reader.get_data_field::<u16>(8))
    }
    #[inline]
    pub fn get_server_ip(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(2).get_text(::std::ptr::null(), 0)
    }
    pub fn has_server_ip(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_server_name(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(3).get_text(::std::ptr::null(), 0)
    }
    pub fn has_server_name(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_remote_ip(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(4).get_text(::std::ptr::null(), 0)
    }
    pub fn has_remote_ip(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_bytes_dlv(self) -> u64 {
      self.reader.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn get_ray_id(self) -> text::Reader<'a> {
      self.reader.get_pointer_field(5).get_text(::std::ptr::null(), 0)
    }
    pub fn has_ray_id(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
  }

  pub struct Builder<'a> { builder : ::capnp::private::layout::StructBuilder<'a> }
  impl <'a> ::capnp::traits::HasStructSize for Builder<'a> {
    #[inline]
    fn struct_size(_unused_self : Option<Builder>) -> layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a> ::capnp::traits::HasTypeId for Builder<'a> {
    #[inline]
    fn type_id(_unused_self : Option<Builder>) -> u64 { _private::TYPE_ID }
  }
  impl <'a> ::capnp::traits::FromStructBuilder<'a> for Builder<'a> {
    fn new(builder : ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a> {
      Builder { builder : builder }
    }
  }

  impl <'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size : u32) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))
    }
  }

  impl <'a> ::capnp::traits::SetPointerBuilder<Builder<'a>> for Reader<'a> {
    fn set_pointer_builder<'b>(pointer : ::capnp::private::layout::PointerBuilder<'b>, value : Reader<'a>) { pointer.set_struct(&value.reader); }
  }

  impl <'a, 'b : 'a> ::capnp::traits::CastableTo<Builder<'a>> for Builder<'b> {
    fn cast(self) -> Builder<'a> { Builder { builder : self.builder } }
  }

  impl <'a> Builder<'a> {
    pub fn as_reader(self) -> Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    pub fn borrow<'b>(&'b mut self) -> Builder<'b> {
      Builder { builder : self.builder}
    }

    pub fn total_size(&self) -> ::capnp::MessageSize {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_timestamp(self) -> i64 {
      self.builder.get_data_field::<i64>(0)
    }
    #[inline]
    pub fn set_timestamp(&mut self, value : i64) {
      self.builder.set_data_field::<i64>(0, value);
    }
    #[inline]
    pub fn get_zone_id(self) -> u32 {
      self.builder.get_data_field::<u32>(2)
    }
    #[inline]
    pub fn set_zone_id(&mut self, value : u32) {
      self.builder.set_data_field::<u32>(2, value);
    }
    #[inline]
    pub fn get_zone_plan(self) -> Option<::log_capnp::ZonePlan> {
      ::std::num::FromPrimitive::from_u16(self.builder.get_data_field::<u16>(6))
    }
    #[inline]
    pub fn set_zone_plan(&mut self, value : ::log_capnp::ZonePlan) {
      self.builder.set_data_field::<u16>(6, value as u16)
    }
    #[inline]
    pub fn get_http(self) -> ::log_capnp::h_t_t_p::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0))
    }
    #[inline]
    pub fn set_http(&mut self, value : ::log_capnp::h_t_t_p::Reader) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
    }
    #[inline]
    pub fn init_http(self, ) -> ::log_capnp::h_t_t_p::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
    }
    pub fn has_http(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_origin(self) -> ::log_capnp::origin::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1))
    }
    #[inline]
    pub fn set_origin(&mut self, value : ::log_capnp::origin::Reader) {
      ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(1), value)
    }
    #[inline]
    pub fn init_origin(self, ) -> ::log_capnp::origin::Builder<'a> {
      ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
    }
    pub fn has_origin(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_country(self) -> Option<::country_capnp::Country> {
      ::std::num::FromPrimitive::from_u16(self.builder.get_data_field::<u16>(7))
    }
    #[inline]
    pub fn set_country(&mut self, value : ::country_capnp::Country) {
      self.builder.set_data_field::<u16>(7, value as u16)
    }
    #[inline]
    pub fn get_cache_status(self) -> Option<::log_capnp::CacheStatus> {
      ::std::num::FromPrimitive::from_u16(self.builder.get_data_field::<u16>(8))
    }
    #[inline]
    pub fn set_cache_status(&mut self, value : ::log_capnp::CacheStatus) {
      self.builder.set_data_field::<u16>(8, value as u16)
    }
    #[inline]
    pub fn get_server_ip(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(2).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_server_ip(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(2).set_text(value);
    }
    #[inline]
    pub fn init_server_ip(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(2).init_text(size)
    }
    pub fn has_server_ip(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_server_name(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(3).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_server_name(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(3).set_text(value);
    }
    #[inline]
    pub fn init_server_name(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(3).init_text(size)
    }
    pub fn has_server_name(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_remote_ip(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(4).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_remote_ip(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(4).set_text(value);
    }
    #[inline]
    pub fn init_remote_ip(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(4).init_text(size)
    }
    pub fn has_remote_ip(&self) -> bool {
      !self.builder.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_bytes_dlv(self) -> u64 {
      self.builder.get_data_field::<u64>(3)
    }
    #[inline]
    pub fn set_bytes_dlv(&mut self, value : u64) {
      self.builder.set_data_field::<u64>(3, value);
    }
    #[inline]
    pub fn get_ray_id(self) -> text::Builder<'a> {
      self.builder.get_pointer_field(5).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_ray_id(&mut self, value : text::Reader) {
      self.builder.get_pointer_field(5).set_text(value);
    }
    #[inline]
    pub fn init_ray_id(self, size : u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(5).init_text(size)
    }
    pub fn has_ray_id(&self) -> bool {
      !self.builder.get_pointer_field(5).is_null()
    }
  }

  pub struct Pipeline { _typeless : ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless : ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless : typeless }
    }
  }
  impl Pipeline {
    pub fn get_http(&self) -> ::log_capnp::h_t_t_p::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
    }
    pub fn get_origin(&self) -> ::log_capnp::origin::Pipeline {
      FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE : layout::StructSize = layout::StructSize { data : 4, pointers : 6 };
    pub const TYPE_ID: u64 = 0xcf67ee8930c5a084;
  }
}
